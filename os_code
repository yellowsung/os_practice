#include "../param.h"    // 시스템 매개변수를 정의하는 헤더 파일
#include "../user.h"     // 사용자 관련 데이터 구조 및 매크로
#include "../systm.h"    // 시스템 전역 변수 및 함수 정의
#include "../proc.h"     // 프로세스 관리 관련 데이터 구조
#include "../text.h"     // 텍스트 세그먼트 관리 데이터 구조
#include "../inode.h"    // 파일 시스템 아이노드 구조
#include "../seg.h"      // 메모리 세그먼트 관리 헤더 파일

#define CLOCK1  0177546  // 첫 번째 클럭 장치의 하드웨어 주소
#define CLOCK2  0172540  // 두 번째 클럭 장치의 하드웨어 주소

/*
 * icode는 사용자 모드에서 실행되는 초기 부트스트랩 프로그램입니다.
 * 시스템 초기화를 위해 /etc/init을 실행합니다.
 */
int icode[] {
    0104413,        /* sys exec; init; initp - 시스템 호출로 init 실행 */
    0000014,        /* initp의 주소를 설정 */
    0000010,        /* 빈 데이터 */
    0000777,        /* 무한 루프 (br .) */
    0000014,        /* initp: init; 0 */
    0000000,        /* 초기화된 데이터 0 */
    0062457,        /* init 문자열 "/etc/init" */
    0061564,
    0064457,
    0064556,
    0000164,
};

/*
 * main() 함수는 시스템 초기화를 담당합니다.
 * 메모리 초기화, 클럭 확인, 루트 디렉토리 설정, 프로세스 생성 등이 포함됩니다.
 */
main() {
    extern schar;          // 외부 변수 schar 선언
    register i, *p;        // i와 p는 레지스터 변수

    /*
     * 메모리 초기화
     * coremap과 UISD, UISA를 사용해 가용 메모리를 계산하고 초기화합니다.
     */
    updlock = 0;           // 업데이트 잠금을 해제
    i = *ka6 + USIZE;      // 첫 번째 사용자 세그먼트 주소 설정
    UISD->r[0] = 077406;   // 세그먼트 크기 설정 (읽기-쓰기)
    for (;;) {
        UISA->r[0] = i;    // 사용자 주소 설정
        if (fuibyte(0) < 0) // 0 주소 확인 (가용 메모리 끝 확인)
            break;
        clearseg(i);       // 세그먼트 초기화
        maxmem++;          // 가용 메모리 증가
        mfree(coremap, 1, i); // 메모리를 coremap에 추가
        i++;
    }

    /*
     * 클럭 장치 확인
     * CLOCK1을 확인하고, 동작하지 않으면 CLOCK2를 확인합니다.
     */
    lks = CLOCK1;
    if (fuiword(lks) == -1) {    // CLOCK1이 유효하지 않은 경우
        lks = CLOCK2;            // CLOCK2를 선택
        if (fuiword(lks) == -1)  // 둘 다 실패하면
            panic("no clock");   // 시스템 초기화 중단
    }

    /*
     * 루트 디렉토리 설정
     * 루트 디렉토리와 현재 디렉토리의 i-node를 가져옵니다.
     */
    rootdir = iget(rootdev, ROOTINO);  // 루트 디바이스의 루트 i-node 가져오기
    rootdir->i_flag =& ~ILOCK;         // i-node 잠금 해제
    u.u_cdir = iget(rootdev, ROOTINO); // 현재 디렉토리 설정
    u.u_cdir->i_flag =& ~ILOCK;        // i-node 잠금 해제

    /*
     * 새로운 프로세스를 생성하고 부트스트랩 코드를 복사한 뒤 실행
     */
    if (newproc()) {              // 새로운 프로세스를 생성
        expand(USIZE+1);          // 메모리 공간 확장
        estabur(0, 1, 0, 0);      // 사용자 세그먼트 설정
        copyout(icode, 0, sizeof icode); // 부트스트랩 코드 복사
        return;                   // 새 프로세스 실행
    }
    sched();                      // 스케줄러 호출
}

/*
 * estabur 함수는 텍스트, 데이터, 스택 세그먼트를 설정합니다.
 * sep 매개변수로 세그먼트를 분리할지 여부를 결정합니다.
 */
estabur(nt, nd, ns, sep) {
    register a, *ap, *dp;

    // 세그먼트 크기 확인 및 에러 처리
    if (sep) {
        if (cputype == 40 || nseg(nt) > 8 || nseg(nd)+nseg(ns) > 8)
            goto err;
    } else {
        if (nseg(nt)+nseg(nd)+nseg(ns) > 8)
            goto err;
    }
    if (nt + nd + ns + USIZE > maxmem)
        goto err;

    // 텍스트 세그먼트 설정
    a = 0;
    ap = &u.u_uisa[0];
    dp = &u.u_uisd[0];
    while (nt >= 128) {
        *dp++ = (127<<8) | RO; // 읽기 전용
        *ap++ = a;
        a += 128;
        nt -= 128;
    }
    if (nt) {
        *dp++ = ((nt-1)<<8) | RO;
        *ap++ = a;
    }

    // 데이터 세그먼트 설정
    a = USIZE;
    while (nd >= 128) {
        *dp++ = (127<<8) | RW; // 읽기-쓰기
        *ap++ = a;
        a += 128;
        nd -= 128;
    }
    if (nd) {
        *dp++ = ((nd-1)<<8) | RW;
        *ap++ = a;
    }

    // 스택 세그먼트 설정
    a += ns;
    while (ns >= 128) {
        a -= 128;
        ns -= 128;
        *--dp = (127<<8) | RW;
        *--ap = a;
    }
    if (ns) {
        *--dp = ((128-ns)<<8) | RW | ED; // 확장 가능
        *--ap = a-128;
    }

    sureg(); // 하드웨어 세그먼트 설정
    return(0);

err:
    u.u_error = ENOMEM; // 메모리 부족 에러
    return(-1);
}

/*
 * sureg 함수는 소프트웨어 세그먼트를 하드웨어 레지스터에 복사합니다.
 */
sureg() {
    register *up, *rp, a;

    a = u.u_procp->p_addr; // 프로세스 시작 주소
    up = &u.u_uisa[16];    // 사용자 주소 시작
    rp = &UISA->r[16];     // 하드웨어 주소 시작
    while (rp > &UISA->r[0])
        *--rp = *--up + a; // 주소 복사
}

/*
 * nseg 함수는 세그먼트를 128 단위로 나누어 올림 처리합니다.
 */
nseg(n) {
    return ((n+127) >> 7); // 128로 나누어 올림
}


#include "../param.h"    // 시스템 매개변수를 정의하는 헤더 파일
#include "../user.h"     // 사용자 관련 데이터 구조 및 매크로
#include "../proc.h"     // 프로세스 관리 데이터 구조 정의
#include "../text.h"     // 텍스트 세그먼트 관리 데이터 구조
#include "../systm.h"    // 시스템 전역 변수 및 함수 정의
#include "../file.h"     // 파일 관련 데이터 구조 정의
#include "../inode.h"    // 파일 시스템 아이노드 구조
#include "../buf.h"      // 버퍼 관리 데이터 구조

/*
 * 새로운 프로세스를 생성하는 함수입니다.
 * 내부적으로 `sys fork`를 처리하며, 새로 생성된 프로세스는 1을 반환합니다.
 */
newproc() {
    int a1, a2;                     // 새로운 프로세스의 주소 관련 변수
    struct proc *p, *up;            // 프로세스 구조체 포인터
    register struct proc *rpp;      // 현재 처리 중인 프로세스
    register *rip, n;               // 레지스터 변수

    p = NULL;                       // 새로운 프로세스 슬롯 초기화
retry:
    mpid++;                         // 프로세스 ID 증가
    if (mpid < 0) {                 // 프로세스 ID가 음수일 경우 초기화
        mpid = 0;
        goto retry;
    }
    for (rpp = &proc[0]; rpp < &proc[NPROC]; rpp++) {
        if (rpp->p_stat == NULL && p == NULL) // 빈 슬롯 찾기
            p = rpp;
        if (rpp->p_pid == mpid)              // 중복된 PID 확인
            goto retry;
    }
    if ((rpp = p) == NULL)                   // 빈 슬롯이 없으면 패닉
        panic("no procs");

    rip = u.u_procp;               // 현재 프로세스
    up = rip;
    rpp->p_stat = SRUN;            // 새 프로세스 상태: 실행 대기 중
    rpp->p_flag = SLOAD;           // 메모리에 로드됨
    rpp->p_uid = rip->p_uid;       // 사용자 ID 복사
    rpp->p_ttyp = rip->p_ttyp;     // 터미널 정보 복사
    rpp->p_nice = rip->p_nice;     // 우선순위 복사
    rpp->p_textp = rip->p_textp;   // 텍스트 세그먼트 복사
    rpp->p_pid = mpid;             // 새 프로세스 ID 설정
    rpp->p_ppid = rip->p_pid;      // 부모 프로세스 ID 설정
    rpp->p_time = 0;               // 실행 시간 초기화

    for (rip = &u.u_ofile[0]; rip < &u.u_ofile[NOFILE];)
        if ((rpp = *rip++) != NULL)
            rpp->f_count++;        // 열린 파일 참조 카운트 증가
    if ((rpp = up->p_textp) != NULL) {
        rpp->x_count++;            // 텍스트 세그먼트 참조 카운트 증가
        rpp->x_ccount++;
    }
    u.u_cdir->i_count++;           // 현재 디렉토리 참조 카운트 증가

    savu(u.u_rsav);                // 현재 프로세스 상태 저장
    rpp = p;                       // 새로운 프로세스로 설정
    u.u_procp = rpp;
    rip = up;
    n = rip->p_size;               // 프로세스 크기 복사
    a1 = rip->p_addr;              // 현재 프로세스 주소 복사
    rpp->p_size = n;               // 새로운 프로세스 크기 설정
    a2 = malloc(coremap, n);       // 메모리 할당

    if (a2 == NULL) {              // 메모리가 부족할 경우
        rip->p_stat = SIDL;        // 프로세스 상태: 생성 중
        rpp->p_addr = a1;          // 기존 주소 복사
        savu(u.u_ssav);            // 스택 상태 저장
        xswap(rpp, 0, 0);          // 프로세스 스왑 아웃
        rpp->p_flag |= SSWAP;      // 스왑 상태 플래그 설정
        rip->p_stat = SRUN;        // 프로세스 상태: 실행 대기 중
    } else {
        rpp->p_addr = a2;          // 새로운 주소 설정
        while (n--)
            copyseg(a1++, a2++);   // 세그먼트 복사
    }
    u.u_procp = rip;               // 현재 프로세스로 복원
    return(0);                     // 정상 종료
}

/*
 * 스케줄링 메인 루프.
 * 실행 준비된 프로세스를 찾고, 스왑 인/아웃을 통해 메모리를 관리합니다.
 */
sched() {
    struct proc *p1;                // 선택된 프로세스
    register struct proc *rp;       // 현재 프로세스
    register a, n;

loop:
    spl6();                         // 인터럽트 우선순위 설정
    n = -1;
    for (rp = &proc[0]; rp < &proc[NPROC]; rp++)
        if (rp->p_stat == SRUN && (rp->p_flag & SLOAD) == 0 &&
            rp->p_time > n) {       // 가장 오래된 실행 대기 프로세스 선택
            p1 = rp;
            n = rp->p_time;
        }
    if (n == -1) {                  // 실행 가능한 프로세스가 없으면
        runout++;
        sleep(&runout, PSWP);       // 스왑 상태에서 대기
        goto loop;
    }

found2:
    rp = p1;
    a = rp->p_size;                 // 필요한 메모리 크기
    if ((a = malloc(coremap, a)) != NULL) {
        rp->p_addr = a;             // 메모리 주소 설정
        rp->p_flag |= SLOAD;        // 메모리에 로드됨
        rp->p_time = 0;             // 대기 시간 초기화
    } else {
        panic("swap error");        // 스왑 에러 처리
    }
    goto loop;                      // 다시 스케줄링 루프로 돌아감
}

/*
 * 프로세스의 데이터+스택 영역 크기를 변경합니다.
 * 크기가 줄어들 경우 메모리를 해제합니다.
 * 크기가 늘어나면 메모리를 할당하고 데이터를 복사합니다.
 */
expand(newsize) {
    int i, n;
    register *p, a1, a2;

    p = u.u_procp;                  // 현재 프로세스
    n = p->p_size;                  // 기존 크기
    p->p_size = newsize;            // 새로운 크기 설정
    a1 = p->p_addr;                 // 기존 주소

    if (n >= newsize) {             // 크기 축소
        mfree(coremap, n - newsize, a1 + newsize);
        return;
    }

    savu(u.u_rsav);                 // 현재 상태 저장
    a2 = malloc(coremap, newsize);  // 메모리 할당
    if (a2 == NULL) {               // 메모리 부족 시
        savu(u.u_ssav);             // 스택 상태 저장
        xswap(p, 1, n);             // 프로세스 스왑 아웃
        p->p_flag |= SSWAP;         // 스왑 플래그 설정
        swtch();                    // 스위치 호출 (재개 없음)
    }

    p->p_addr = a2;                 // 새로운 주소 설정
    for (i = 0; i < n; i++)         // 기존 데이터 복사
        copyseg(a1 + i, a2++);
    mfree(coremap, n, a1);          // 기존 메모리 해제
    retu(p->p_addr);                // 프로세스 메모리 주소 갱신
    sureg();                        // 세그먼트 설정 업데이트
}
